'use strict';

var url = 'mongodb://localhost:27017/bugtracker';

var express = require('express');
var bodyParser = require('body-parser');
var MongoClient = require('mongodb').MongoClient;
var ObjectId = require('mongodb').ObjectId;
var assert = require('assert');
var connection = null;

var app = express();

app.use(bodyParser.json());

var root = __dirname + '/public';
app.use(express.static(root));

app.get('/api/bugs', function (req, res) {
  var filter = {};
  if (req.query.priority) filter.priority = req.query.priority;
  if (req.query.status) filter.status = req.query.status;
  findBugs(connection, filter, function (data) {
    res.json(data);
  });
});

app.get('/api/bugs/:id', function (req, res) {
  var id = req.params.id;
  connection.collection('bugs').find({ _id: ObjectId(id) }).limit(1).next(function (err, doc) {
    res.json(doc);
  });
});

app.post('/api/bugs/', function (req, res) {
  var bug = req.body;
  connection.collection('bugs').insertOne(bug, function (err, result) {
    var newId = result.insertedId;
    connection.collection('bugs').find({ _id: newId }).limit(1).next(function (err, doc) {
      res.json(doc);
    });
  });
});

app.put('/api/bugs/:id', function (req, res) {
  var id = req.params.id;
  var bug = req.body;
  connection.collection('bugs').findAndModify({ _id: ObjectId(id) }, {}, bug, { 'new': true }, function (err, result) {
    res.json(result);
  });
});

MongoClient.connect(url, function (err, db) {
  assert.equal(null, err);
  console.log("MongoDB connection: OK.");
  connection = db;
  app.listen(3000, function () {
    console.log('Example app listening on port 3000!');
  });
});

var findBugs = function findBugs(db, filter, callback) {
  var cursor = db.collection('bugs').find(filter);
  var bugs = [];
  cursor.each(function (err, doc) {
    assert.equal(err, null);
    if (doc !== null) {
      bugs.push(doc);
    } else {
      callback(bugs);
    }
  });
};

//# sourceMappingURL=data:application/json;base64,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O0dBQXRCLENBQXpGLENBSDBDO0NBQW5CLENBQXpCOztBQVFBLFlBQVksT0FBWixDQUFvQixHQUFwQixFQUF5QixVQUFTLEdBQVQsRUFBYyxFQUFkLEVBQWtCO0FBQ3pDLFNBQU8sS0FBUCxDQUFhLElBQWIsRUFBbUIsR0FBbkIsRUFEeUM7QUFFekMsVUFBUSxHQUFSLENBQVkseUJBQVosRUFGeUM7QUFHekMsZUFBYSxFQUFiLENBSHlDO0FBSXpDLE1BQUksTUFBSixDQUFXLElBQVgsRUFBaUIsWUFBWTtBQUMzQixZQUFRLEdBQVIsQ0FBWSxxQ0FBWixFQUQyQjtHQUFaLENBQWpCLENBSnlDO0NBQWxCLENBQXpCOztBQVNBLElBQUksV0FBVyxTQUFYLFFBQVcsQ0FBUyxFQUFULEVBQWEsTUFBYixFQUFxQixRQUFyQixFQUErQjtBQUMzQyxNQUFJLFNBQVMsR0FBRyxVQUFILENBQWMsTUFBZCxFQUFzQixJQUF0QixDQUEyQixNQUEzQixDQUFULENBRHVDO0FBRTNDLE1BQUksT0FBTyxFQUFQLENBRnVDO0FBRzNDLFNBQU8sSUFBUCxDQUFZLFVBQVMsR0FBVCxFQUFjLEdBQWQsRUFBbUI7QUFDNUIsV0FBTyxLQUFQLENBQWEsR0FBYixFQUFrQixJQUFsQixFQUQ0QjtBQUU1QixRQUFJLFFBQVEsSUFBUixFQUFjO0FBQ2hCLFdBQUssSUFBTCxDQUFVLEdBQVYsRUFEZ0I7S0FBbEIsTUFFTztBQUNKLGVBQVMsSUFBVCxFQURJO0tBRlA7R0FGUyxDQUFaLENBSDJDO0NBQS9CIiwiZmlsZSI6IndlYmFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciB1cmwgPSAnbW9uZ29kYjovL2xvY2FsaG9zdDoyNzAxNy9idWd0cmFja2VyJztcblxudmFyIGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XG52YXIgYm9keVBhcnNlciA9IHJlcXVpcmUoJ2JvZHktcGFyc2VyJyk7XG52YXIgTW9uZ29DbGllbnQgPSByZXF1aXJlKCdtb25nb2RiJykuTW9uZ29DbGllbnQ7XG52YXIgT2JqZWN0SWQgPSByZXF1aXJlKCdtb25nb2RiJykuT2JqZWN0SWQ7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG52YXIgY29ubmVjdGlvbiA9IG51bGw7XG5cbnZhciBhcHAgPSBleHByZXNzKCk7XG5cbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuXG52YXIgcm9vdCA9IF9fZGlybmFtZSArICcvcHVibGljJztcbmFwcC51c2UoZXhwcmVzcy5zdGF0aWMocm9vdCkpO1xuXG5hcHAuZ2V0KCcvYXBpL2J1Z3MnLCBmdW5jdGlvbihyZXEsIHJlcykge1xuICB2YXIgZmlsdGVyID0ge307XG4gIGlmIChyZXEucXVlcnkucHJpb3JpdHkpXG4gICAgZmlsdGVyLnByaW9yaXR5ID0gcmVxLnF1ZXJ5LnByaW9yaXR5O1xuICBpZiAocmVxLnF1ZXJ5LnN0YXR1cylcbiAgICBmaWx0ZXIuc3RhdHVzID0gcmVxLnF1ZXJ5LnN0YXR1cztcbiAgZmluZEJ1Z3MoY29ubmVjdGlvbiwgZmlsdGVyLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgcmVzLmpzb24oZGF0YSk7XG4gIH0pO1xufSk7XG5cbmFwcC5nZXQoJy9hcGkvYnVncy86aWQnLCBmdW5jdGlvbihyZXEsIHJlcykge1xuICB2YXIgaWQgPSByZXEucGFyYW1zLmlkO1xuICBjb25uZWN0aW9uLmNvbGxlY3Rpb24oJ2J1Z3MnKS5maW5kKHtfaWQ6IE9iamVjdElkKGlkKX0pLmxpbWl0KDEpLm5leHQoZnVuY3Rpb24oZXJyLCBkb2Mpe1xuICAgIHJlcy5qc29uKGRvYyk7XG4gIH0pO1xufSk7XG5cbmFwcC5wb3N0KCcvYXBpL2J1Z3MvJywgZnVuY3Rpb24ocmVxLCByZXMpIHtcbiAgdmFyIGJ1ZyA9IHJlcS5ib2R5O1xuICBjb25uZWN0aW9uLmNvbGxlY3Rpb24oJ2J1Z3MnKS5pbnNlcnRPbmUoYnVnLCBmdW5jdGlvbihlcnIsIHJlc3VsdCkge1xuICAgIHZhciBuZXdJZCA9IHJlc3VsdC5pbnNlcnRlZElkO1xuICAgIGNvbm5lY3Rpb24uY29sbGVjdGlvbignYnVncycpLmZpbmQoe19pZDogbmV3SWR9KS5saW1pdCgxKS5uZXh0KGZ1bmN0aW9uKGVyciwgZG9jKXtcbiAgICAgIHJlcy5qc29uKGRvYyk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG5cbmFwcC5wdXQoJy9hcGkvYnVncy86aWQnLCBmdW5jdGlvbihyZXEsIHJlcykge1xuICB2YXIgaWQgPSByZXEucGFyYW1zLmlkO1xuICB2YXIgYnVnID0gcmVxLmJvZHk7XG4gIGNvbm5lY3Rpb24uY29sbGVjdGlvbignYnVncycpLmZpbmRBbmRNb2RpZnkoe19pZDogT2JqZWN0SWQoaWQpfSwge30sIGJ1ZywgeyduZXcnOiB0cnVlfSwgZnVuY3Rpb24oZXJyLCByZXN1bHQpIHtcbiAgICByZXMuanNvbihyZXN1bHQpO1xuICB9KTtcbn0pO1xuXG5Nb25nb0NsaWVudC5jb25uZWN0KHVybCwgZnVuY3Rpb24oZXJyLCBkYikge1xuICBhc3NlcnQuZXF1YWwobnVsbCwgZXJyKTtcbiAgY29uc29sZS5sb2coXCJNb25nb0RCIGNvbm5lY3Rpb246IE9LLlwiKTtcbiAgY29ubmVjdGlvbiA9IGRiO1xuICBhcHAubGlzdGVuKDMwMDAsIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zb2xlLmxvZygnRXhhbXBsZSBhcHAgbGlzdGVuaW5nIG9uIHBvcnQgMzAwMCEnKTtcbiAgfSk7XG59KTtcblxudmFyIGZpbmRCdWdzID0gZnVuY3Rpb24oZGIsIGZpbHRlciwgY2FsbGJhY2spIHtcbiAgIHZhciBjdXJzb3IgPSBkYi5jb2xsZWN0aW9uKCdidWdzJykuZmluZChmaWx0ZXIpO1xuICAgdmFyIGJ1Z3MgPSBbXTtcbiAgIGN1cnNvci5lYWNoKGZ1bmN0aW9uKGVyciwgZG9jKSB7XG4gICAgICBhc3NlcnQuZXF1YWwoZXJyLCBudWxsKTtcbiAgICAgIGlmIChkb2MgIT09IG51bGwpIHtcbiAgICAgICAgYnVncy5wdXNoKGRvYyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgY2FsbGJhY2soYnVncyk7XG4gICAgICB9XG4gICB9KTtcbn07XG4iXX0=